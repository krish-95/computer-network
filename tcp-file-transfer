#server side coding
//
//
#include<stdio.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<netdb.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<arpa/inet.h>
int main()
{
         int socketmain,socketclient,child,port=5123,len=81;
         struct sockaddr_in serv,clientaddr;
char str[50];
         FILE *f1;
         f1=fopen("newfile.txt","r");

         socklen_t clientlen;
            if((socketmain=socket(AF_INET,SOCK_STREAM,0))<0)
           {        
            printf("\n server cannot open socket");
            exit(0);
           }      
         bzero(&serv,sizeof(serv));
         serv.sin_family=AF_INET;
         serv.sin_addr.s_addr=htonl(INADDR_ANY);
         serv.sin_port=htons(port);
             if((bind(socketmain,(struct sockaddr*)&serv,sizeof(serv)))<0)
                {            
                 printf("\n server bind failed");
                 exit(0);
                }         
         listen(socketmain,5);
             if((socketclient=accept(socketmain,(struct sockaddr*)&clientaddr,&clientlen))<0)
               {               
                printf("\n client is bad");
                exit(0);
               }
while(fgets(str,50,f1))
{
send(socketclient,str,strlen(str),0);
}
fclose(f1);
return 0;   
}
//
//
#client side coding
//
//
#include<stdio.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<netdb.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<arpa/inet.h>
int main(int argc,char **argv)
{
         int sockfd,n,port=5223;
         struct sockaddr_in serv;
         char buf[100],msg[100];
         FILE *f;
         f=fopen("fput.txt","a");
         if(argc!=3)
            {
             printf("invalid format");
             exit(0);
            }
         if((sockfd=socket(AF_INET,SOCK_STREAM,0))<0)
            {
             printf("\n socket cannot be opened");
             exit(0);
            }
bzero(&serv,sizeof(serv));
serv.sin_family=AF_INET;
serv.sin_port=htons(atoi(argv[2]));
if(connect(sockfd,(struct sockaddr*)&serv,sizeof(serv))<0)
{
printf("\n connection failed");
exit(0);
}
while(n=read(sockfd,msg,50))
{
msg[n]='\0';
fprintf(f,"%s",msg);
}
close(sockfd);
fclose(f);
return 0;
}

